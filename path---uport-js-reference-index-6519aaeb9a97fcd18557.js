webpackJsonp([52102622597857],{644:function(e,t){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Attesting Credentials",index:2,type:"content"},fields:{slug:"/attestcredentials"}}},{node:{frontmatter:{title:"Getting Started",index:0,type:"content"},fields:{slug:"/gettingstarted"}}},{node:{frontmatter:{title:"Uport Specs",index:0,type:"content"},fields:{slug:"/readme"}}},{node:{frontmatter:{title:"React-Uport Truffle Box",index:0,type:"content"},fields:{slug:"/reactuporttruffle"}}},{node:{frontmatter:{title:"Requesting Credentials",index:1,type:"content"},fields:{slug:"/requestcredentials"}}},{node:{frontmatter:{title:"Signing Transactions",index:3,type:"content"},fields:{slug:"/signtransactions"}}},{node:{frontmatter:{title:"Clients (apps)",index:3,type:"content"},fields:{slug:"/clients"}}},{node:{frontmatter:{title:"Overview",index:0,type:"content"},fields:{slug:"/overview"}}},{node:{frontmatter:{title:"Platform",index:2,type:"content"},fields:{slug:"/platform"}}},{node:{frontmatter:{title:"Protocols",index:3,type:"content"},fields:{slug:"/protocol"}}},{node:{frontmatter:{title:"Private Chain Support",index:5,type:"content"},fields:{slug:"/lambda-olorun/readme"}}},{node:{frontmatter:{title:"did-jwt",index:3,type:"content"},fields:{slug:"/did-jwt/reference/index"}}},{node:{frontmatter:{title:"Working with did-JWT's",index:4,type:"content"},fields:{slug:"/did-jwt/guides/index"}}},{node:{frontmatter:{title:"Uport-JS Server-side How-to",index:1,type:"content"},fields:{slug:"/uport-js/guides/server-side-credentials-example"}}},{node:{frontmatter:{title:"Uport JS",index:4,type:"content"},fields:{slug:"/uport-js/reference/index"}}},{node:{frontmatter:{title:"Uport Connect",index:1,type:"content"},fields:{slug:"/uport-connect-docs"}}}]},navCategories:{edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],frontmatter:{category:"guides",index:2}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Requirements",depth:3},{value:"1. Get the uPort App",depth:2},{value:"2. Get an Application Identity",depth:2},{value:"3. Setup Dependencies",depth:2},{value:"4. Configure and Run Code",depth:2}],frontmatter:{category:"guides",index:0}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],frontmatter:{category:"reference",index:0}}},{node:{fields:{slug:"/reactuporttruffle"},headings:[{value:"React-uport Truffle box",depth:1},{value:"Setup React Truffle Box",depth:2},{value:"Create the necessary uport-connect objects",depth:2},{value:"Request a user's information",depth:2},{value:"Create an Attestation",depth:2},{value:"Wrapping it up",depth:2}],frontmatter:{category:"tutorials",index:0}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Verifying credentials",depth:2},{value:"Enabling Push Notifications",depth:2}],frontmatter:{category:"guides",index:1}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],frontmatter:{category:"guides",index:3}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],frontmatter:{category:"overview",index:0}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],frontmatter:{category:"overview",index:2}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/messages/index"},headings:[{value:"Off-chain Messages",depth:1},{value:"JSON Web Token",depth:2},{value:"Requirements",depth:3},{value:"JOSE Header",depth:4},{value:"Attributes",depth:4},{value:"Signature Verification",depth:3},{value:"Unsigned Requests",depth:2},{value:"Standard Unsigned Parameters",depth:3},{value:"Message types",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/privatechain"},headings:[{value:"Private Chain Provisioning Message",depth:1},{value:"Attributes",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/sharereq"},headings:[{value:"Selective Disclosure Request",depth:1},{value:"Attributes",depth:4},{value:"Unsigned Requests",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/shareresp"},headings:[{value:"Selective Disclosure Response",depth:1},{value:"Attributes",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/verification"},headings:[{value:"Verification",depth:1},{value:"Attributes",depth:2},{value:"Claims Best Practices",depth:2},{value:"Use atomic claims",depth:3},{value:"Bundling multiple claims as one",depth:3},{value:"Claim Taxonomy",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/lambda-olorun/readme"},headings:[{value:"lambda-olorun",depth:1},{value:"Setting a new private chain",depth:2},{value:"Deploy uPort Identity Contracts",depth:3},{value:"Configure Olorun hosted service for a new private chain",depth:3},{value:"Run your own Olorun",depth:3},{value:"Contributing",depth:2}],frontmatter:{category:"guides",index:5}}},{node:{fields:{slug:"/flows/index"},headings:[{value:"Uport Request Flows",depth:1},{value:"Specific Application flows",depth:2},{value:"Errors",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/privatechain"},headings:[{value:"Private Chain Provisioning Flow",depth:1},{value:"Requirements",depth:2},{value:"Provisioning Methodology",depth:2},{value:"Endpoint",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/selectivedisclosure"},headings:[{value:"Selective Disclosure Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Request",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/tx"},headings:[{value:"Ethereum Transaction Flow",depth:1},{value:"Endpoint",depth:2},{value:"Addresses",depth:2},{value:"ERC 67",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/verification"},headings:[{value:"Send Verification Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Verifications",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/identitydocument"},headings:[{value:"Identity Document",depth:1},{value:"Contents",depth:2},{value:"Parameters",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/index"},headings:[{value:"uPort PKI",depth:1},{value:"Purpose",depth:2},{value:"Creating and Verifying a JWT",depth:2},{value:"Identity Document",depth:2},{value:"Verifying a signature",depth:2},{value:"Resolving the Public Key for ",depth:3},{value:"Resolving the Public Encryption Key for ",depth:3},{value:"Registering an Identity Document",depth:2},{value:"External Accounts (Key Pairs)",depth:3},{value:"Smart Contract Accounts",depth:3},{value:"uPort Mobile App Created Identities",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/fuel-server"},headings:[{value:"Transaction Fueling Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"Fund address",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/relay-server"},headings:[{value:"Meta Transaction Relaying Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"MetaSignedTx",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/index"},headings:[{value:"Request/Response Transports",depth:1},{value:"Requests",depth:2},{value:"Open URL",depth:3},{value:"QR Code",depth:3},{value:"Push Notifications",depth:3},{value:"Responses",depth:2},{value:"Redirect callback type",depth:3},{value:"HTTP post callback type",depth:3},{value:"Messaging Server",depth:2},{value:"Preparing callback URL",depth:3},{value:"Listening for Response",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4},{value:"Cleanup",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Examples",depth:2},{value:"Mobile Browser Transport",depth:3},{value:"Desktop Browser Serverless Transport",depth:3},{value:"Desktop Browser Server Backed Transport",depth:3},{value:"Push Notification Transport",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/push"},headings:[{value:"Push Notification Transport",depth:1},{value:"Encrypting the request",depth:2},{value:"Proper encoding of the request",depth:3},{value:"Encryption of the request",depth:3},{value:"Encoding the encrypted data",depth:3},{value:"Sending the request",depth:2},{value:"Push notification server",depth:3},{value:"Endpoint",depth:4},{value:"Headers",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/did-jwt/reference/index"},headings:[{value:"Algorithms supported",depth:2},{value:"DID PublicKey Types",depth:2},{value:"Claims",depth:2},{value:"Modules",depth:2},{value:"Functions",depth:2},{value:"did-jwt/JWT",depth:2},{value:"did-jwt/JWT.decodeJWT(jwt) ⇒ ",depth:3},{value:"did-jwt/JWT.createJWT(payload, ",depth:3},{value:"did-jwt/JWT.verifyJWT(jwt, ",depth:3},{value:"did-jwt/JWT.resolveAuthenticator(alg, did, auth) ⇒ ",depth:3},{value:"SimpleSigner(hexPrivateKey) ⇒ ",depth:2}],frontmatter:{category:"reference",index:3}}},{node:{fields:{slug:"/did-jwt/guides/index"},headings:[{value:"Working with did-JWT's",depth:1},{value:"Creating a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Verifying a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Signer Functions",depth:2},{value:"SimpleSigner",depth:3},{value:"Parameters",depth:4},{value:"Creating Custom Signers for integrating with HSM",depth:3},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4}],frontmatter:{category:"guides",index:4}}},{node:{fields:{slug:"/uport-js/guides/server-side-credentials-example"},headings:[{value:"Server-side Credentials",depth:1},{value:"Prerequisites:",depth:3},{value:"Register an App",depth:2},{value:"Setup a Requestor Service",depth:2},{value:"Setup a Creator Service",depth:2},{value:"For the fields of the credential:",depth:3},{value:"Setup a Verification service",depth:2}],frontmatter:{category:"tutorials",index:1}}},{node:{fields:{slug:"/uport-js/reference/index"},headings:[{value:"Credentials",depth:1},{value:"new Credentials(",depth:2},{value:"credentials.requestDisclosure(",depth:2},{value:"credentials.createRequest(",depth:2},{value:"credentials.disclose(",depth:2},{value:"credentials.authenticate(token, ",depth:2},{value:"credentials.createVerificationRequest(unsignedClaim, sub) ⇒ ",depth:2},{value:"credentials.receive(token, ",depth:2},{value:"credentials.verifyProfile(token) ⇒ ",depth:2},{value:"credentials.attest(",depth:2},{value:"Credentials.createIdentity()",depth:2}],frontmatter:{category:"reference",index:4}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Modules",depth:2},{value:"Classes",depth:2},{value:"uport-connect/topicFactory",depth:2},{value:"uport-connect/topicFactory~TopicFactory(isOnMobile, pollingInterval, chasquiUrl) ⇒ ",depth:3},{value:"TopicFactory~waitForHashChange(topicName, cb)",depth:4},{value:"TopicFactory~pollForResult(topicName, url, cb, cancelled)",depth:4},{value:"TopicFactory~clearTopic(url)",depth:4},{value:"TopicFactory~newTopic(topicName) ⇒ ",depth:4},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"UportSubprovider",depth:2},{value:"new UportSubprovider(args)",depth:3},{value:"uportSubprovider.send()",depth:3},{value:"uportSubprovider.sendAsync(payload, callback)",depth:3}],frontmatter:{category:"reference",index:1}}}]},postBySlug:{html:'<p><a name="Credentials"></a></p>\n<h1 id="credentials"><a href="#credentials" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credentials</h1>\n<p>The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\ncredentials and signed mobile app requests (ex. selective disclosure requests\nfor private data). It also provides signature verification over signed payloads and\nallows you to send push notifications to users.</p>\n<p><strong>Kind</strong>: global class  </p>\n<ul>\n<li>\n<p><a href="#Credentials">Credentials</a></p>\n<ul>\n<li><a href="#new_Credentials_new">new Credentials([settings])</a></li>\n<li>\n<p><em>instance</em></p>\n<ul>\n<li><a href="#Credentials+requestDisclosure">.requestDisclosure([params], expiresIn)</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><del><a href="#Credentials+createRequest">.createRequest([params])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></del></li>\n<li><a href="#Credentials+disclose">.disclose([params])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+authenticate">.authenticate(token, [callbackUrl])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+createVerificationRequest">.createVerificationRequest(unsignedClaim, sub)</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><del><a href="#Credentials+receive">.receive(token, [callbackUrl])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></del></li>\n<li><a href="#Credentials+verifyProfile">.verifyProfile(token)</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+attest">.attest([credential])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n</ul>\n</li>\n<li>\n<p><em>static</em></p>\n<ul>\n<li><a href="#Credentials.createIdentity">.createIdentity()</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><a name="new_Credentials_new"></a></p>\n<h2 id="new-credentialssettings"><a href="#new-credentialssettings" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>new Credentials([settings])</h2>\n<p>Instantiates a new uPort Credentials object</p>\n<p>The following example is just for testing purposes. You should never store a private key in source code.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>[settings]</td><td><code>Object</code></td><td><p>setttings</p>\n</td>\n    </tr><tr>\n    <td>settings.did</td><td><code>DID</code></td><td><p>Application <a href="https://w3c-ccg.github.io/did-spec/#decentralized-identifiers-dids">DID</a> (unique identifier) for your application</p>\n</td>\n    </tr><tr>\n    <td>settings.privateKey</td><td><code>String</code></td><td><p>A hex encoded 32 byte private key</p>\n</td>\n    </tr><tr>\n    <td>settings.signer</td><td><code>SimpleSigner</code></td><td><p>a signer object, see <a href="https://github.com/uport-project/did-jwt#signer-functions">Signer Functions</a></p>\n</td>\n    </tr><tr>\n    <td>settings.ethrConfig</td><td><code>Object</code></td><td><p>Configuration object for ethr did resolver. See <a href="https://github.com/uport-project/ethr-did-resolver">ethr-did-resolver</a></p>\n</td>\n    </tr><tr>\n    <td>settings.muportConfig</td><td><code>Object</code></td><td><p>Configuration object for muport did resolver. See <a href="https://github.com/uport-project/muport-did-resolver">muport-did-resolver</a></p>\n</td>\n    </tr><tr>\n    <td>settings.address</td><td><code>Address</code></td><td><p>DEPRECATED your uPort address (may be the address of your application&#39;s uPort identity)</p>\n</td>\n    </tr><tr>\n    <td>settings.networks</td><td><code>Object</code></td><td><p>DEPRECATED networks config object, ie. {  &#39;0x94365e3b&#39;: { rpcUrl: &#39;<a href="https://private.chain/rpc&#39;">https://private.chain/rpc&#39;</a>, address: &#39;0x0101.... }}</p>\n</td>\n    </tr><tr>\n    <td>settings.registry</td><td><code>UportLite</code></td><td><p>DEPRECATED a registry object from UportLite</p>\n</td>\n    </tr>  </tbody>\n</table>\n<hr>\n<p><a name="Credentials+requestDisclosure"></a></p>\n<h2 id="credentialsrequestdisclosureparams-expiresin-⇒-codepromiseobject-errorcode"><a href="#credentialsrequestdisclosureparams-expiresin-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.requestDisclosure([params], expiresIn) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Creates a <a href="https://github.com/uport-project/specs/blob/develop/messages/sharereq.md">Selective Disclosure Request JWT</a></p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a signed JSON Web Token or rejects with an error  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Default</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>[params]</td><td><code>Object</code></td><td><code>{}</code></td><td><p>request params object</p>\n</td>\n    </tr><tr>\n    <td>params.requested</td><td><code>Array</code></td><td></td><td><p>an array of attributes for which you are requesting credentials to be shared for</p>\n</td>\n    </tr><tr>\n    <td>params.verified</td><td><code>Array</code></td><td></td><td><p>an array of attributes for which you are requesting verified credentials to be shared for</p>\n</td>\n    </tr><tr>\n    <td>params.notifications</td><td><code>Boolean</code></td><td></td><td><p>boolean if you want to request the ability to send push notifications</p>\n</td>\n    </tr><tr>\n    <td>params.callbackUrl</td><td><code>String</code></td><td></td><td><p>the url which you want to receive the response of this request</p>\n</td>\n    </tr><tr>\n    <td>params.network_id</td><td><code>String</code></td><td></td><td><p>network id of Ethereum chain of identity eg. 0x4 for rinkeby</p>\n</td>\n    </tr><tr>\n    <td>params.accountType</td><td><code>String</code></td><td></td><td><p>Ethereum account type: &quot;general&quot;, &quot;segregated&quot;, &quot;keypair&quot;, &quot;devicekey&quot; or &quot;none&quot;</p>\n</td>\n    </tr><tr>\n    <td>expiresIn</td><td><code>Number</code></td><td></td><td><p>Seconds until expiry</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> requested<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'country\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n               callbackUrl<span class="token punctuation">:</span> <span class="token string">\'https://myserver.com\'</span><span class="token punctuation">,</span>\n               notifications<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n credentials<span class="token punctuation">.</span><span class="token function">requestDisclosure</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>jwt <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+createRequest"></a></p>\n<h2 id="delcredentialscreaterequestparams-⇒-codepromiseobject-errorcodedel"><a href="#delcredentialscreaterequestparams-%E2%87%92-codepromiseobject-errorcodedel" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><del>credentials.createRequest([params]) ⇒ <code>Promise.&#x3C;Object, Error></code></del></h2>\n<p><strong><em>Deprecated</em></strong></p>\n<p>Creates a <a href="https://github.com/uport-project/specs/blob/develop/messages/sharereq.md">Selective Disclosure Request JWT</a></p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a signed JSON Web Token or rejects with an error  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Default</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>[params]</td><td><code>Object</code></td><td><code>{}</code></td><td><p>request params object</p>\n</td>\n    </tr><tr>\n    <td>params.requested</td><td><code>Array</code></td><td></td><td><p>an array of attributes for which you are requesting credentials to be shared for</p>\n</td>\n    </tr><tr>\n    <td>params.verified</td><td><code>Array</code></td><td></td><td><p>an array of attributes for which you are requesting verified credentials to be shared for</p>\n</td>\n    </tr><tr>\n    <td>params.notifications</td><td><code>Boolean</code></td><td></td><td><p>boolean if you want to request the ability to send push notifications</p>\n</td>\n    </tr><tr>\n    <td>params.callbackUrl</td><td><code>String</code></td><td></td><td><p>the url which you want to receive the response of this request</p>\n</td>\n    </tr><tr>\n    <td>params.network_id</td><td><code>String</code></td><td></td><td><p>network id of Ethereum chain of identity eg. 0x4 for rinkeby</p>\n</td>\n    </tr><tr>\n    <td>params.accountType</td><td><code>String</code></td><td></td><td><p>Ethereum account type: &quot;general&quot;, &quot;segregated&quot;, &quot;keypair&quot;, &quot;devicekey&quot; or &quot;none&quot;</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> requested<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'country\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n               callbackUrl<span class="token punctuation">:</span> <span class="token string">\'https://myserver.com\'</span><span class="token punctuation">,</span>\n               notifications<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n credentials<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>jwt <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+disclose"></a></p>\n<h2 id="credentialsdiscloseparams-⇒-codepromiseobject-errorcode"><a href="#credentialsdiscloseparams-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.disclose([params]) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Creates a <a href="https://github.com/uport-project/specs/blob/develop/messages/shareresp.md">Selective Disclosure Response JWT</a>.</p>\n<p>This can either be used to share information about the signing identity or as the response to a\n<a href="https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md">Selective Disclosure Flow</a>, where it can be used to authenticate the identity.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a signed JSON Web Token or rejects with an error  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Default</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>[params]</td><td><code>Object</code></td><td><code>{}</code></td><td><p>request params object</p>\n</td>\n    </tr><tr>\n    <td>params.req</td><td><code>JWT</code></td><td></td><td><p>A selective disclosure Request JWT if this is returned as part of an authentication flow</p>\n</td>\n    </tr><tr>\n    <td>params.own</td><td><code>Object</code></td><td></td><td><p>An object of self attested claims about the signer (eg. name etc)</p>\n</td>\n    </tr><tr>\n    <td>params.verified</td><td><code>Array</code></td><td></td><td><p>An array of attestation JWT&#39;s to include</p>\n</td>\n    </tr><tr>\n    <td>params.nad</td><td><code>MNID</code></td><td></td><td><p>An ethereum address encoded as an <a href="https://github.com/uport-project/mnid">MNID</a></p>\n</td>\n    </tr><tr>\n    <td>params.capabilities</td><td><code>Array</code></td><td></td><td><p>An array of capability JWT&#39;s to include</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">credentials<span class="token punctuation">.</span><span class="token function">disclose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>own<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">\'Lourdes Valentina Gomez\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>jwt <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+authenticate"></a></p>\n<h2 id="credentialsauthenticatetoken-callbackurl-⇒-codepromiseobject-errorcode"><a href="#credentialsauthenticatetoken-callbackurl-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.authenticate(token, [callbackUrl]) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Authenticates <a href="https://github.com/uport-project/specs/blob/develop/messages/shareresp.md">Selective Disclosure Response JWT</a> from mobile\napp as part of the <a href="https://github.com/uport-project/specs/blob/develop/flows/selectivedisclosure.md">Selective Disclosure Flow</a>.</p>\n<p> It Verifies and parses the given response token and verifies the challenge response flow.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a parsed response or rejects with an error.  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Default</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>token</td><td><code>String</code></td><td></td><td><p>a response token</p>\n</td>\n    </tr><tr>\n    <td>[callbackUrl]</td><td><code>String</code></td><td><code></code></td><td><p>callbackUrl</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resToken <span class="token operator">=</span> <span class="token string">\'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....\'</span>\n credentials<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>resToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> credentials <span class="token operator">=</span> res<span class="token punctuation">.</span>verified\n      <span class="token keyword">const</span> name <span class="token operator">=</span>  res<span class="token punctuation">.</span>name\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+createVerificationRequest"></a></p>\n<h2 id="credentialscreateverificationrequestunsignedclaim-sub-⇒-codepromiseobject-errorcode"><a href="#credentialscreateverificationrequestunsignedclaim-sub-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.createVerificationRequest(unsignedClaim, sub) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Creates a signed request for the user to attest a list of claims.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a signed JSON Web Token or rejects with an error  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>unsignedClaim</td><td><code>Object</code></td><td><p>an object that is an unsigned claim which you want the user to attest</p>\n</td>\n    </tr><tr>\n    <td>sub</td><td><code>String</code></td><td><p>the DID of the identity you want to sign the attestation</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> unsignedClaim <span class="token operator">=</span> <span class="token punctuation">{</span>\n   claim<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n     <span class="token string">"Citizen of city X"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n       <span class="token string">"Allowed to vote"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token string">"Document"</span><span class="token punctuation">:</span> <span class="token string">"QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmPW"</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   sub<span class="token punctuation">:</span> <span class="token string">"2oTvBxSGseWFqhstsEHgmCBi762FbcigK5u"</span>\n <span class="token punctuation">}</span>\n credentials<span class="token punctuation">.</span><span class="token function">createVerificationRequest</span><span class="token punctuation">(</span>unsignedClaim<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>jwt <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+receive"></a></p>\n<h2 id="delcredentialsreceivetoken-callbackurl-⇒-codepromiseobject-errorcodedel"><a href="#delcredentialsreceivetoken-callbackurl-%E2%87%92-codepromiseobject-errorcodedel" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><del>credentials.receive(token, [callbackUrl]) ⇒ <code>Promise.&#x3C;Object, Error></code></del></h2>\n<p><strong><em>Deprecated</em></strong></p>\n<p>Receive signed response token from mobile app. Verifies and parses the given response token.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a parsed response or rejects with an error.  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Default</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>token</td><td><code>String</code></td><td></td><td><p>a response token</p>\n</td>\n    </tr><tr>\n    <td>[callbackUrl]</td><td><code>String</code></td><td><code></code></td><td><p>callbackUrl</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resToken <span class="token operator">=</span> <span class="token string">\'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....\'</span>\n credentials<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>resToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> credentials <span class="token operator">=</span> res<span class="token punctuation">.</span>verified\n         <span class="token keyword">const</span> name <span class="token operator">=</span>  res<span class="token punctuation">.</span>name\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+verifyProfile"></a></p>\n<h2 id="credentialsverifyprofiletoken-⇒-codepromiseobject-errorcode"><a href="#credentialsverifyprofiletoken-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.verifyProfile(token) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Verify and return profile from a <a href="https://github.com/uport-project/specs/blob/develop/messages/shareresp.md">Selective Disclosure Response JWT</a>.</p>\n<p> The main difference between this and <code class="language-text">authenticate()</code> is that it does not verify the challenge. This can be used to verify user profiles that have been shared\nthrough other methods such as QR codes and messages.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a parsed response or rejects with an error.  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>token</td><td><code>String</code></td><td><p>a response token</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resToken <span class="token operator">=</span> <span class="token string">\'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....\'</span>\n credentials<span class="token punctuation">.</span><span class="token function">verifyProfile</span><span class="token punctuation">(</span>resToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>profile <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> credentials <span class="token operator">=</span> profile<span class="token punctuation">.</span>verified\n         <span class="token keyword">const</span> name <span class="token operator">=</span>  profile<span class="token punctuation">.</span>name\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n </code></pre>\n      </div>\n<hr>\n<p><a name="Credentials+attest"></a></p>\n<h2 id="credentialsattestcredential-⇒-codepromiseobject-errorcode"><a href="#credentialsattestcredential-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.attest([credential]) ⇒ <code>Promise.&#x3C;Object, Error></code></h2>\n<p>Create a credential (a signed JSON Web Token)</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a><br>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a credential (JWT) or rejects with an error  </p>\n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>[credential]</td><td><code>Object</code></td><td><p>a unsigned credential object</p>\n</td>\n    </tr><tr>\n    <td>credential.sub</td><td><code>String</code></td><td><p>subject of credential (a uPort address)</p>\n</td>\n    </tr><tr>\n    <td>credential.claim</td><td><code>String</code></td><td><p>claim about subject single key value or key mapping to object with multiple values (ie { address: {street: ..., zip: ..., country: ...}})</p>\n</td>\n    </tr><tr>\n    <td>credential.exp</td><td><code>String</code></td><td><p>time at which this claim expires and is no longer valid (seconds since epoch)</p>\n</td>\n    </tr>  </tbody>\n</table>\n<p><strong>Example</strong>  </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">credentials<span class="token punctuation">.</span><span class="token function">attest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  sub<span class="token punctuation">:</span> <span class="token string">\'5A8bRWU3F7j3REx3vkJ...\'</span><span class="token punctuation">,</span> <span class="token comment">// uPort address of user, likely a MNID</span>\n  exp<span class="token punctuation">:</span> <span class="token operator">&lt;</span>future timestamp<span class="token operator">></span><span class="token punctuation">,</span>\n  claim<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'John Smith\'</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> credential <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<hr>\n<p><a name="Credentials.createIdentity"></a></p>\n<h2 id="credentialscreateidentity"><a href="#credentialscreateidentity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credentials.createIdentity()</h2>\n<p>generate a DID and private key</p>\n<p><strong>Kind</strong>: static method of <a href="#Credentials"><code>Credentials</code></a>  </p>\n<hr>',
timeToRead:11,excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",headings:[{value:"Credentials",depth:1},{value:"new Credentials(",depth:2},{value:"credentials.requestDisclosure(",depth:2},{value:"credentials.createRequest(",depth:2},{value:"credentials.disclose(",depth:2},{value:"credentials.authenticate(token, ",depth:2},{value:"credentials.createVerificationRequest(unsignedClaim, sub) ⇒ ",depth:2},{value:"credentials.receive(token, ",depth:2},{value:"credentials.verifyProfile(token) ⇒ ",depth:2},{value:"credentials.attest(",depth:2},{value:"Credentials.createIdentity()",depth:2}],frontmatter:{title:"Uport JS",category:"reference",type:"content"},fields:{slug:"/uport-js/reference/index"}},postByCategory:{totalCount:16,edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],excerpt:"Attesting Credentials * If the user consents, the uPort app saves the attestation token to their device. Browser displays a QR code (if…",timeToRead:2,frontmatter:{title:"Attesting Credentials",category:"guides",index:2,type:"content"}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Requirements",depth:3},{value:"1. Get the uPort App",depth:2},{value:"2. Get an Application Identity",depth:2},{value:"3. Setup Dependencies",depth:2},{value:"4. Configure and Run Code",depth:2}],excerpt:"Getting Started Welcome! The goal of this guide is to get you set up quickly with a skeleton project and to familiarize you with a few basic…",timeToRead:4,frontmatter:{title:"Getting Started",category:"guides",index:0,type:"content"}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],excerpt:"uPort Specs uPort is a platform for user centric identity and communication. The platform currently consists of our mobile app, Ethereum…",timeToRead:2,frontmatter:{title:"Uport Specs",category:"reference",index:0,type:"content"}}},{node:{fields:{slug:"/reactuporttruffle"},headings:[{value:"React-uport Truffle box",depth:1},{value:"Setup React Truffle Box",depth:2},{value:"Create the necessary uport-connect objects",depth:2},{value:"Request a user's information",depth:2},{value:"Create an Attestation",depth:2},{value:"Wrapping it up",depth:2}],excerpt:"React-uport Truffle box This a short tutorial to requesting credentials and signing attestations with uPort.  We will be leveraging the…",timeToRead:4,frontmatter:{title:"React-Uport Truffle Box",category:"tutorials",index:0,type:"content"}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Verifying credentials",depth:2},{value:"Enabling Push Notifications",depth:2}],excerpt:"Requesting Credentials The first and most basic step you should take is to allow your user to connect their uPort to your app. Uport-connect…",timeToRead:4,frontmatter:{title:"Requesting Credentials",category:"guides",index:1,type:"content"}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],excerpt:"Signing Transactions Browser displays QR code with randomly generated sessionID in a URI Browser starts polling chasqui using the sessionId…",timeToRead:4,frontmatter:{title:"Signing Transactions",category:"guides",index:3,type:"content"}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],excerpt:"Clients (apps) Allow users, developers, and applications to interact with the uPort platform. uPort Mobile Wallet : Secure mobile self…",timeToRead:1,frontmatter:{title:"Clients (apps)",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],excerpt:"OVERVIEW uPort is an interoperable identity network for a secure, private, decentralized web. uPort provides open protocols for…",timeToRead:1,frontmatter:{title:"Overview",category:"overview",index:0,type:"content"}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],excerpt:"PLATFORM The uPort Platform is our implementation of the uPort Protocol designed to make decentralized identities on Ethereum easy to create…",timeToRead:3,frontmatter:{title:"Platform",category:"overview",index:2,type:"content"}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],excerpt:"PROTOCOLS uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web…",timeToRead:1,frontmatter:{title:"Protocols",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/lambda-olorun/readme"},headings:[{value:"lambda-olorun",depth:1},{value:"Setting a new private chain",depth:2},{value:"Deploy uPort Identity Contracts",depth:3},{value:"Configure Olorun hosted service for a new private chain",depth:3},{value:"Run your own Olorun",depth:3},{value:"Contributing",depth:2}],excerpt:"lambda-olorun Olorun  (Yoruba: Ọlọrun or Ọlọhun), literally the ruler of (or in) the Heavens, is the name given to one of the three…",timeToRead:3,frontmatter:{title:"Private Chain Support",category:"guides",index:5,type:"content"}}},{node:{fields:{slug:"/did-jwt/reference/index"},headings:[{value:"Algorithms supported",depth:2},{value:"DID PublicKey Types",depth:2},{value:"Claims",depth:2},{value:"Modules",depth:2},{value:"Functions",depth:2},{value:"did-jwt/JWT",depth:2},{value:"did-jwt/JWT.decodeJWT(jwt) ⇒ ",depth:3},{value:"did-jwt/JWT.createJWT(payload, ",depth:3},{value:"did-jwt/JWT.verifyJWT(jwt, ",depth:3},{value:"did-jwt/JWT.resolveAuthenticator(alg, did, auth) ⇒ ",depth:3},{value:"SimpleSigner(hexPrivateKey) ⇒ ",depth:2}],excerpt:"Algorithms supported  the  secp256k1 ECDSA curve  the  secp256k1 ECDSA curve  with recovery parameter DID PublicKey Types The   section of a…",timeToRead:7,frontmatter:{title:"did-jwt",category:"reference",index:3,type:"content"}}},{node:{fields:{slug:"/did-jwt/guides/index"},headings:[{value:"Working with did-JWT's",depth:1},{value:"Creating a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Verifying a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Signer Functions",depth:2},{value:"SimpleSigner",depth:3},{value:"Parameters",depth:4},{value:"Creating Custom Signers for integrating with HSM",depth:3},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4}],excerpt:"Working with did-JWT's Creating a JWT Use the   function Parameters Name Description Required an object containing any claims you want to…",timeToRead:5,frontmatter:{title:"Working with did-JWT's",category:"guides",index:4,type:"content"}}},{node:{fields:{slug:"/uport-js/guides/server-side-credentials-example"},headings:[{value:"Server-side Credentials",depth:1},{value:"Prerequisites:",depth:3},{value:"Register an App",depth:2},{value:"Setup a Requestor Service",depth:2},{value:"Setup a Creator Service",depth:2},{value:"For the fields of the credential:",depth:3},{value:"Setup a Verification service",depth:2}],excerpt:"Server-side Credentials Here we will demonstrate how to create and sign a custom credential on a server (called the Creator) and present…",timeToRead:9,frontmatter:{title:"Uport-JS Server-side How-to",category:"tutorials",index:1,type:"content"}}},{node:{fields:{slug:"/uport-js/reference/index"},headings:[{value:"Credentials",depth:1},{value:"new Credentials(",depth:2},{value:"credentials.requestDisclosure(",depth:2},{value:"credentials.createRequest(",depth:2},{value:"credentials.disclose(",depth:2},{value:"credentials.authenticate(token, ",depth:2},{value:"credentials.createVerificationRequest(unsignedClaim, sub) ⇒ ",depth:2},{value:"credentials.receive(token, ",depth:2},{value:"credentials.verifyProfile(token) ⇒ ",depth:2},{value:"credentials.attest(",depth:2},{value:"Credentials.createIdentity()",depth:2}],excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",timeToRead:11,frontmatter:{title:"Uport JS",category:"reference",index:4,type:"content"}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Modules",depth:2},{value:"Classes",depth:2},{value:"uport-connect/topicFactory",depth:2},{value:"uport-connect/topicFactory~TopicFactory(isOnMobile, pollingInterval, chasquiUrl) ⇒ ",depth:3},{value:"TopicFactory~waitForHashChange(topicName, cb)",depth:4},{value:"TopicFactory~pollForResult(topicName, url, cb, cancelled)",depth:4},{value:"TopicFactory~clearTopic(url)",depth:4},{value:"TopicFactory~newTopic(topicName) ⇒ ",depth:4},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"UportSubprovider",depth:2},{value:"new UportSubprovider(args)",depth:3},{value:"uportSubprovider.send()",depth:3},{value:"uportSubprovider.sendAsync(payload, callback)",depth:3}],excerpt:"Modules Classes uport-connect/topicFactory Manages the communication channel between the uport-connect library and a\n uPort mobile app. The…",timeToRead:25,frontmatter:{title:"Uport Connect",category:"reference",index:1,type:"content"}}}]}},pathContext:{slug:"/uport-js/reference/index"}}}});
//# sourceMappingURL=path---uport-js-reference-index-6519aaeb9a97fcd18557.js.map