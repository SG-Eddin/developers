{"version":3,"sources":["webpack:///./src/layouts/theme.js","webpack:///./src/utilities/getSelectedText.js","webpack:///./src/components/layout.js"],"names":["theme","brand","secondaryBrand","brandHighlight","tocAccent","accent","accentDark","lightGrey","darkGrey","ink","errorRed","codeEditBlue","codeEditGreen","themedWhite","contentWidthLaptop","contentWidthTablet","contentWidthLargePhone","sitePadding","bobbysLeftMarginPreference","gregsLeftMarginPreference","getSelectedText","window","getSelection","toString","document","selection","createRange","text","connect","undefined","dispatch","getFlags","type","React","Component","[object Object]","args","super","defineProperty_default","this","trackSelectedText","ev","target","getAttribute","selectedText","track","value","addEventListener","e","keyCode","which","componentDidMount","props","trackTextSelection","getLocalTitle","pathPrefix","config","currentPath","location","pathname","replace","title","includes","category","string","charAt","toUpperCase","slice","render","children","react_default","a","createElement","Helmet_default","siteTitle","name","content","siteDescription","styled_components_browser_esm"],"mappings":"yNAyBeA,MAzBD,CAEZC,MAAO,UACPC,eAAgB,UAChBC,eAAgB,UAChBC,UAAW,sBACXC,OAAQ,UACRC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,IAAK,QACLC,SAAU,UACVC,aAAc,UACdC,cAAe,UAEfC,YAAa,OAEbC,mBAAoB,OACpBC,mBAAoB,OACpBC,uBAAwB,OACxBC,YAAa,OACbC,2BAA4B,MAC5BC,0BAA2B,MCZdC,MAVS,IACnBC,OAAOC,aACDD,OAAOC,eAAeC,WAE5BC,SAASC,UACHD,SAASC,UAAUC,cAAcC,KAEnC,YCiFMC,qBAAQC,EARIC,IAAQ,CACjCC,WACED,EAAS,CACPE,KAAM,yBAKGJ,CA1Ef,cAAyBK,IAAMC,UAAUC,eAAAC,GAAAC,SAAAD,GAAAE,IAAAC,KAAA,qBAKlB,KACnB,MAAMC,EAAoBC,IACxB,GAAGA,GAAMA,EAAGC,QAAUD,EAAGC,OAAOC,aAAa,0BAC3C,OAEF,MAAMC,EAAexB,IAClBwB,GACDC,YAAM,gBAAiB,CACrBC,MAAOF,KAIbpB,SAASuB,iBAAiB,UAAWP,GAAmB,GACxDhB,SAASuB,iBAAiB,QAASC,IACrBA,EAAEC,SAAWD,EAAEE,QAI1B,KAtBLC,oBACEZ,KAAKa,MAAMrB,WACXQ,KAAKc,qBAsBPC,gBAIE,MAAMC,EAAaC,IAAOD,WAAaC,IAAOD,WAAa,IACrDE,EAAclB,KAAKa,MAAMM,SAASC,SACrCC,QAAQL,EAAY,IACpBK,QAAQ,IAAK,IAChB,IAAIC,EAAQ,GACZ,GAAoB,KAAhBJ,EACFI,EAAQ,YACH,GAAoB,gBAAhBJ,EACTI,EAAQ,kBACH,GAAoB,WAAhBJ,EACTI,EAAQ,aACH,GAAIJ,EAAYK,SAAS,eAAgB,CAC9C,MAAMC,EAAWN,EACdG,QAAQ,cAAe,IACvBA,QAAQ,IAAK,IACbA,QAAQ,IAAK,KAChBC,KAnBkBG,EAmBID,EAlBfC,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,KADvD,IAAoBH,EAqBpB,OAAOH,EAETO,SACE,MAAMC,SAAEA,GAAa9B,KAAKa,MAC1B,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAA,gBAAWhB,IAAOkB,gBAAgBnC,KAAKe,mBACvCgB,EAAAC,EAAAC,cAAA,QAAMG,KAAK,cAAcC,QAASpB,IAAOqB,kBACzCP,EAAAC,EAAAC,cAAA,QAAMG,KAAK,WAAWC,QAAQ,yCAEhCN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAe9E,MAAOA,GACnBqE","file":"2-d1b35afd116bf3f0d5d5.js","sourcesContent":["const theme = {\n  // named colors:\n  brand: '#5c50ca',\n  secondaryBrand: '#827cff',\n  brandHighlight: '#7958d8',\n  tocAccent: 'rgba(230, 224, 248)',\n  accent: '#ADD2EB',\n  accentDark: \"#35495E\",\n  lightGrey: '#F6F6F6',\n  darkGrey: '#91a2a3',\n  ink: 'black',\n  errorRed: '#FF6666',\n  codeEditBlue: '#2973b7',\n  codeEditGreen: '#42b983',\n  // themedWhite: '#f5f2f0',\n  themedWhite: '#FFF',\n  // content width:\n  contentWidthLaptop: '95ch',\n  contentWidthTablet: '65ch',\n  contentWidthLargePhone: '50vw',\n  sitePadding: \"25px\",\n  bobbysLeftMarginPreference: \"15%\",\n  gregsLeftMarginPreference: \"5%\"\n}\n\nexport default theme;\n","const getSelectedText = () => {\n  if(window.getSelection) {\n    return window.getSelection().toString()\n  }\n  if(document.selection) {\n    return document.selection.createRange().text\n  }\n  return ''\n}\n\nexport default getSelectedText\n","import React from \"react\";\nimport { connect } from 'react-redux'\nimport Helmet from \"react-helmet\";\nimport styled, {ThemeProvider} from \"styled-components\"\nimport config from \"../../data/SiteConfig\";\nimport \"../layouts/css/normalize.css\"\nimport \"../layouts/css/webflow.css\"\nimport \"../layouts/css/uport-51f8fe-896815bc956b8e53e437c9c3db.webflow.css\"\nimport \"../../node_modules/prism-themes/themes/prism-duotone-light.css\"\nimport \"../layouts/css/index.css\"\nimport theme from '../layouts/theme'\nimport getSelectedText from '../utilities/getSelectedText'\nimport track from '../utilities/track'\n\nclass MainLayout extends React.Component {\n  componentDidMount() {\n    this.props.getFlags()\n    this.trackTextSelection()\n  }\n  trackTextSelection = () => {\n    const trackSelectedText = ev => {\n      if(ev && ev.target && ev.target.getAttribute('data-do-not-track-copy')) {\n        return\n      }\n      const selectedText = getSelectedText()\n      if(selectedText) {\n        track('Text Selected', {\n          value: selectedText\n        })\n      }\n    }\n    document.addEventListener('mouseup', trackSelectedText, false)\n    document.addEventListener('keyup', e => {\n      const key = e.keyCode || e.which\n      if(key === 16) {\n        trackSelectedText\n      }\n    }, false)\n  }\n  getLocalTitle() {\n    function capitalize(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    const pathPrefix = config.pathPrefix ? config.pathPrefix : \"/\";\n    const currentPath = this.props.location.pathname\n      .replace(pathPrefix, \"\")\n      .replace(\"/\", \"\");\n    let title = \"\";\n    if (currentPath === \"\") {\n      title = \"Home\";\n    } else if (currentPath === \"categories/\") {\n      title = \"Categories\";\n    } else if (currentPath === \"about/\") {\n      title = \"About\";\n    } else if (currentPath.includes(\"categories/\")) {\n      const category = currentPath\n        .replace(\"categories/\", \"\")\n        .replace(\"/\", \"\")\n        .replace(\"-\", \" \");\n      title = `${capitalize(category)}`;\n    }\n    return title;\n  }\n  render() {\n    const { children } = this.props;\n    return (\n      <div>\n        <Helmet>\n          <title>{`${config.siteTitle} |  ${this.getLocalTitle()}`}</title>\n          <meta name='description' content={config.siteDescription} />\n          <meta name='viewport' content='width=device-width, initial-scale=1' />\n        </Helmet>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getFlags() {\n    dispatch({\n      type: 'GET_FEATURE_FLAGS'\n    })\n  }\n})\n\nexport default connect(undefined, mapDispatchToProps)(MainLayout)\n"],"sourceRoot":""}