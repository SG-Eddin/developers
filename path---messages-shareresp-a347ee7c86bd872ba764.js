webpackJsonp([0xe58ce835e911],{626:function(e,t){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Attesting Credentials",index:2,type:"content"},fields:{slug:"/attestcredentials"}}},{node:{frontmatter:{title:"Getting Started",index:0,type:"content"},fields:{slug:"/gettingstarted"}}},{node:{frontmatter:{title:"Uport Specs",index:0,type:"content"},fields:{slug:"/readme"}}},{node:{frontmatter:{title:"Requesting Credentials",index:1,type:"content"},fields:{slug:"/requestcredentials"}}},{node:{frontmatter:{title:"React-Uport Truffle Box",index:0,type:"content"},fields:{slug:"/reactuporttruffle"}}},{node:{frontmatter:{title:"Signing Transactions",index:3,type:"content"},fields:{slug:"/signtransactions"}}},{node:{frontmatter:{title:"Clients (apps)",index:3,type:"content"},fields:{slug:"/clients"}}},{node:{frontmatter:{title:"Overview",index:0,type:"content"},fields:{slug:"/overview"}}},{node:{frontmatter:{title:"Platform",index:2,type:"content"},fields:{slug:"/platform"}}},{node:{frontmatter:{title:"Protocols",index:3,type:"content"},fields:{slug:"/protocol"}}},{node:{frontmatter:{title:"Private Chain Support",index:0,type:"content"},fields:{slug:"/lambda-olorun/readme"}}},{node:{frontmatter:{title:"did-jwt",index:3,type:"content"},fields:{slug:"/did-jwt/reference/index"}}},{node:{frontmatter:{title:"Working with did-JWT's",index:4,type:"content"},fields:{slug:"/did-jwt/guides/index"}}},{node:{frontmatter:{title:"Uport JS",index:4,type:"content"},fields:{slug:"/uport-js/reference/index"}}},{node:{frontmatter:{title:"Uport-JS Server-side How-to",index:1,type:"content"},fields:{slug:"/uport-js/guides/server-side-credentials-example"}}},{node:{frontmatter:{title:"Uport Connect",index:1,type:"content"},fields:{slug:"/uport-connect-docs"}}}]},navCategories:{edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],frontmatter:{category:"guides",index:2}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Requirements",depth:3},{value:"1. Get the uPort App",depth:2},{value:"2. Get an Application Identity",depth:2},{value:"3. Setup Dependencies",depth:2},{value:"4. Configure and Run Code",depth:2}],frontmatter:{category:"guides",index:0}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],frontmatter:{category:"reference",index:0}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Verifying credentials",depth:2},{value:"Enabling Push Notifications",depth:2}],frontmatter:{category:"guides",index:1}}},{node:{fields:{slug:"/reactuporttruffle"},headings:[{value:"React-uport Truffle box",depth:1},{value:"Setup React Truffle Box",depth:2},{value:"Create the necessary uport-connect objects",depth:2},{value:"Request a user's information",depth:2},{value:"Create an Attestation",depth:2},{value:"Wrapping it up",depth:2}],frontmatter:{category:"tutorials",index:0}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],frontmatter:{category:"guides",index:3}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],frontmatter:{category:"overview",index:0}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],frontmatter:{category:"overview",index:2}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/lambda-olorun/readme"},headings:[{value:"lambda-olorun",depth:1},{value:"Setting a new private chain",depth:2},{value:"Deploy uPort Identity Contracts",depth:3},{value:"Configure Olorun hosted service for a new private chain",depth:3},{value:"Run your own Olorun",depth:3},{value:"Contributing",depth:2}],frontmatter:{category:"guides",index:0}}},{node:{fields:{slug:"/messages/index"},headings:[{value:"Off-chain Messages",depth:1},{value:"JSON Web Token",depth:2},{value:"Requirements",depth:3},{value:"JOSE Header",depth:4},{value:"Attributes",depth:4},{value:"Signature Verification",depth:3},{value:"Unsigned Requests",depth:2},{value:"Standard Unsigned Parameters",depth:3},{value:"Message types",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/privatechain"},headings:[{value:"Private Chain Provisioning Message",depth:1},{value:"Attributes",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/sharereq"},headings:[{value:"Selective Disclosure Request",depth:1},{value:"Attributes",depth:4},{value:"Unsigned Requests",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/shareresp"},headings:[{value:"Selective Disclosure Response",depth:1},{value:"Attributes",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/verification"},headings:[{value:"Verification",depth:1},{value:"Attributes",depth:2},{value:"Claims Best Practices",depth:2},{value:"Use atomic claims",depth:3},{value:"Bundling multiple claims as one",depth:3},{value:"Claim Taxonomy",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/index"},headings:[{value:"Uport Request Flows",depth:1},{value:"Specific Application flows",depth:2},{value:"Errors",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/privatechain"},headings:[{value:"Private Chain Provisioning Flow",depth:1},{value:"Requirements",depth:2},{value:"Provisioning Methodology",depth:2},{value:"Endpoint",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/selectivedisclosure"},headings:[{value:"Selective Disclosure Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Request",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/tx"},headings:[{value:"Ethereum Transaction Flow",depth:1},{value:"Endpoint",depth:2},{value:"Addresses",depth:2},{value:"ERC 67",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/verification"},headings:[{value:"Send Verification Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Verifications",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/fuel-server"},headings:[{value:"Transaction Fueling Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"Fund address",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/relay-server"},headings:[{value:"Meta Transaction Relaying Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"MetaSignedTx",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/identitydocument"},headings:[{value:"Identity Document",depth:1},{value:"Contents",depth:2},{value:"Parameters",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/index"},headings:[{value:"uPort PKI",depth:1},{value:"Purpose",depth:2},{value:"Creating and Verifying a JWT",depth:2},{value:"Identity Document",depth:2},{value:"Verifying a signature",depth:2},{value:"Resolving the Public Key for ",depth:3},{value:"Resolving the Public Encryption Key for ",depth:3},{value:"Registering an Identity Document",depth:2},{value:"External Accounts (Key Pairs)",depth:3},{value:"Smart Contract Accounts",depth:3},{value:"uPort Mobile App Created Identities",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/index"},headings:[{value:"Request/Response Transports",depth:1},{value:"Requests",depth:2},{value:"Open URL",depth:3},{value:"QR Code",depth:3},{value:"Push Notifications",depth:3},{value:"Responses",depth:2},{value:"Redirect callback type",depth:3},{value:"HTTP post callback type",depth:3},{value:"Messaging Server",depth:2},{value:"Preparing callback URL",depth:3},{value:"Listening for Response",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4},{value:"Cleanup",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Examples",depth:2},{value:"Mobile Browser Transport",depth:3},{value:"Desktop Browser Serverless Transport",depth:3},{value:"Desktop Browser Server Backed Transport",depth:3},{value:"Push Notification Transport",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/push"},headings:[{value:"Push Notification Transport",depth:1},{value:"Encrypting the request",depth:2},{value:"Proper encoding of the request",depth:3},{value:"Encryption of the request",depth:3},{value:"Encoding the encrypted data",depth:3},{value:"Sending the request",depth:2},{value:"Push notification server",depth:3},{value:"Endpoint",depth:4},{value:"Headers",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/did-jwt/reference/index"},headings:[{value:"Algorithms supported",depth:2},{value:"DID PublicKey Types",depth:2},{value:"Claims",depth:2},{value:"Modules",depth:2},{value:"Functions",depth:2},{value:"did-jwt/JWT",depth:2},{value:"did-jwt/JWT.decodeJWT(jwt) ⇒ ",depth:3},{value:"did-jwt/JWT.createJWT(payload, ",depth:3},{value:"did-jwt/JWT.verifyJWT(jwt, ",depth:3},{value:"did-jwt/JWT.resolveAuthenticator(alg, did, auth) ⇒ ",depth:3},{value:"SimpleSigner(hexPrivateKey) ⇒ ",depth:2}],frontmatter:{category:"reference",index:3}}},{node:{fields:{slug:"/did-jwt/guides/index"},headings:[{value:"Working with did-JWT's",depth:1},{value:"Creating a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Verifying a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Signer Functions",depth:2},{value:"SimpleSigner",depth:3},{value:"Parameters",depth:4},{value:"Creating Custom Signers for integrating with HSM",depth:3},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4}],frontmatter:{category:"guides",index:4}}},{node:{fields:{slug:"/uport-js/reference/index"},headings:[{value:"Credentials",depth:1},{value:"new Credentials(",depth:2},{value:"credentials.requestDisclosure(",depth:2},{value:"credentials.createRequest(",depth:2},{value:"credentials.disclose(",depth:2},{value:"credentials.authenticate(token, ",depth:2},{value:"credentials.createVerificationRequest(unsignedClaim, sub) ⇒ ",depth:2},{value:"credentials.receive(token, ",depth:2},{value:"credentials.verifyProfile(token) ⇒ ",depth:2},{value:"credentials.attest(",depth:2},{value:"Credentials.createIdentity()",depth:2}],frontmatter:{category:"reference",index:4}}},{node:{fields:{slug:"/uport-js/guides/server-side-credentials-example"},headings:[{value:"Server-side Credentials",depth:1},{value:"Prerequisites:",depth:3},{value:"Register an App",depth:2},{value:"Setup a Requestor Service",depth:2},{value:"Setup a Creator Service",depth:2},{value:"For the fields of the credential:",depth:3},{value:"Setup a Verification service",depth:2}],frontmatter:{category:"tutorials",index:1}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Modules",depth:2},{value:"Classes",depth:2},{value:"uport-connect/topicFactory",depth:2},{value:"uport-connect/topicFactory~TopicFactory(isOnMobile, pollingInterval, chasquiUrl) ⇒ ",depth:3},{value:"TopicFactory~waitForHashChange(topicName, cb)",depth:4},{value:"TopicFactory~pollForResult(topicName, url, cb, cancelled)",depth:4},{value:"TopicFactory~clearTopic(url)",depth:4},{value:"TopicFactory~newTopic(topicName) ⇒ ",depth:4},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"UportSubprovider",depth:2},{value:"new UportSubprovider(args)",depth:3},{value:"uportSubprovider.send()",depth:3},{value:"uportSubprovider.sendAsync(payload, callback)",depth:3}],frontmatter:{category:"reference",index:1}}}]},postBySlug:{html:'<h1 id="selective-disclosure-response"><a href="#selective-disclosure-response" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Selective Disclosure Response</h1>\n<p>The Selective Disclosure Response is created by a users mobile app as a response to a <a href="sharereq">Selective Disclosure Request</a> during the <a href="/flows/selectivedisclosure">Selective Disclosure Flow</a>.</p>\n<p>The response is always signed and returned to the callback url included in the request.</p>\n<h4 id="attributes"><a href="#attributes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Attributes</h4>\n<p>The following attributes of the JWT are supported:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class="language-text">type</code></td>\n<td>MUST have the value \n<code class="language-text">shareResp</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.1"><code class="language-text">iss</code></a></td>\n<td>The \n<a href="https://github.com/uport-project/mnid">MNID</a>\n of the signing identity</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.3"><code class="language-text">aud</code></a></td>\n<td>The \n<a href="https://github.com/uport-project/mnid">MNID</a>\n of the requester or the callback url if this was created as a response to an unsigned request</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.6"><code class="language-text">iat</code></a></td>\n<td>The time of issuance</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.4"><code class="language-text">exp</code></a></td>\n<td>Expiration time of JWT</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code class="language-text">req</code></td>\n<td>The original JWT encoded Selective Disclosure Request</td>\n<td>yes for responses to signed requests</td>\n</tr>\n<tr>\n<td><code class="language-text">nad</code></td>\n<td>The \n<a href="https://github.com/uport-project/mnid">MNID</a>\n of the Ethereum account requested using \n<code class="language-text">act</code>\n in the \n<a href="sharereq">Selective Disclosure Request</a></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code class="language-text">dad</code></td>\n<td>The \n<code class="language-text">devicekey</code>\n as a regular hex encoded ethereum address as requested using \n<code class="language-text">act=&#39;devicekey&#39;</code>\n in the \n<a href="sharereq">Selective Disclosure Request</a></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code class="language-text">own</code></td>\n<td>The self signed claims requested from a user. Object of claim types for self signed claims eg: \n<code class="language-text">{&quot;name&quot;:&quot;Carol Crypteau&quot;, &quot;email&quot;:&quot;carol@sample.com&quot;}</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code class="language-text">verified</code></td>\n<td>Array of requested verification JWTs</td>\n<td>no</td>\n</tr>\n<tr>\n<td><code class="language-text">capabilities</code></td>\n<td>An array of JWT tokens giving client app the permissions requested. Currently a token allowing them to send push notifications</td>\n<td>no</td>\n</tr>\n</tbody>\n</table>',timeToRead:2,excerpt:"Selective Disclosure Response The Selective Disclosure Response is created by a users mobile app as a response to a  Selective Disclosure…",headings:[{value:"Selective Disclosure Response",depth:1},{value:"Attributes",depth:4}],frontmatter:{title:"Off-chain Messages",category:"reference",type:"content"},fields:{slug:"/messages/shareresp"}},postByCategory:{totalCount:16,edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],excerpt:"Attesting Credentials * If the user consents, the uPort app saves the attestation token to their device. Browser displays a QR code (if…",timeToRead:2,frontmatter:{title:"Attesting Credentials",category:"guides",index:2,type:"content"}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Requirements",depth:3},{value:"1. Get the uPort App",depth:2},{value:"2. Get an Application Identity",depth:2},{value:"3. Setup Dependencies",depth:2},{value:"4. Configure and Run Code",depth:2}],excerpt:"Getting Started Welcome! The goal of this guide is to get you set up quickly with a skeleton project and to familiarize you with a few basic…",timeToRead:4,frontmatter:{title:"Getting Started",category:"guides",index:0,type:"content"}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],excerpt:"uPort Specs uPort is a platform for user centric identity and communication. The platform currently consists of our mobile app, Ethereum…",timeToRead:2,frontmatter:{title:"Uport Specs",category:"reference",index:0,type:"content"}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Verifying credentials",depth:2},{value:"Enabling Push Notifications",depth:2}],excerpt:"Requesting Credentials The first and most basic step you should take is to allow your user to connect their uPort to your app. Uport-connect…",timeToRead:4,frontmatter:{title:"Requesting Credentials",category:"guides",index:1,type:"content"}}},{node:{fields:{slug:"/reactuporttruffle"},headings:[{value:"React-uport Truffle box",depth:1},{value:"Setup React Truffle Box",depth:2},{value:"Create the necessary uport-connect objects",depth:2},{value:"Request a user's information",depth:2},{value:"Create an Attestation",depth:2},{value:"Wrapping it up",depth:2}],excerpt:"React-uport Truffle box This a short tutorial to requesting credentials and signing attestations with uPort.  We will be leveraging the…",timeToRead:4,frontmatter:{title:"React-Uport Truffle Box",category:"tutorials",index:0,type:"content"}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],excerpt:"Signing Transactions Browser displays QR code with randomly generated sessionID in a URI Browser starts polling chasqui using the sessionId…",timeToRead:4,frontmatter:{title:"Signing Transactions",category:"guides",index:3,type:"content"}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],excerpt:"Clients (apps) Allow users, developers, and applications to interact with the uPort platform. uPort Mobile Wallet : Secure mobile self…",timeToRead:1,frontmatter:{title:"Clients (apps)",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],excerpt:"OVERVIEW uPort is an interoperable identity network for a secure, private, decentralized web. uPort provides open protocols for…",timeToRead:1,frontmatter:{title:"Overview",category:"overview",index:0,type:"content"}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],excerpt:"PLATFORM The uPort Platform is our implementation of the uPort Protocol designed to make decentralized identities on Ethereum easy to create…",timeToRead:3,frontmatter:{title:"Platform",category:"overview",index:2,type:"content"}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],excerpt:"PROTOCOLS uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web…",timeToRead:1,frontmatter:{title:"Protocols",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/lambda-olorun/readme"},headings:[{value:"lambda-olorun",depth:1},{value:"Setting a new private chain",depth:2},{value:"Deploy uPort Identity Contracts",depth:3},{value:"Configure Olorun hosted service for a new private chain",depth:3},{value:"Run your own Olorun",depth:3},{value:"Contributing",depth:2}],excerpt:"lambda-olorun Olorun  (Yoruba: Ọlọrun or Ọlọhun), literally the ruler of (or in) the Heavens, is the name given to one of the three…",timeToRead:3,frontmatter:{title:"Private Chain Support",category:"guides",index:0,type:"content"}}},{node:{fields:{slug:"/did-jwt/reference/index"},headings:[{value:"Algorithms supported",depth:2},{value:"DID PublicKey Types",depth:2},{value:"Claims",depth:2},{value:"Modules",depth:2},{value:"Functions",depth:2},{value:"did-jwt/JWT",depth:2},{value:"did-jwt/JWT.decodeJWT(jwt) ⇒ ",depth:3},{value:"did-jwt/JWT.createJWT(payload, ",depth:3},{value:"did-jwt/JWT.verifyJWT(jwt, ",depth:3},{value:"did-jwt/JWT.resolveAuthenticator(alg, did, auth) ⇒ ",depth:3},{value:"SimpleSigner(hexPrivateKey) ⇒ ",depth:2}],excerpt:"Algorithms supported  the  secp256k1 ECDSA curve  the  secp256k1 ECDSA curve  with recovery parameter DID PublicKey Types The   section of a…",timeToRead:7,frontmatter:{title:"did-jwt",category:"reference",index:3,type:"content"}}},{node:{fields:{slug:"/did-jwt/guides/index"},headings:[{value:"Working with did-JWT's",depth:1},{value:"Creating a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Verifying a JWT",depth:2},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4},{value:"Signer Functions",depth:2},{value:"SimpleSigner",depth:3},{value:"Parameters",depth:4},{value:"Creating Custom Signers for integrating with HSM",depth:3},{value:"Parameters",depth:4},{value:"Promise Return Value",depth:4}],excerpt:"Working with did-JWT's Creating a JWT Use the   function Parameters Name Description Required an object containing any claims you want to…",timeToRead:5,frontmatter:{title:"Working with did-JWT's",category:"guides",index:4,type:"content"}}},{node:{fields:{slug:"/uport-js/reference/index"},headings:[{value:"Credentials",depth:1},{value:"new Credentials(",depth:2},{value:"credentials.requestDisclosure(",depth:2},{value:"credentials.createRequest(",depth:2},{value:"credentials.disclose(",depth:2},{value:"credentials.authenticate(token, ",depth:2},{value:"credentials.createVerificationRequest(unsignedClaim, sub) ⇒ ",depth:2},{value:"credentials.receive(token, ",depth:2},{value:"credentials.verifyProfile(token) ⇒ ",depth:2},{value:"credentials.attest(",depth:2},{value:"Credentials.createIdentity()",depth:2}],excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",timeToRead:11,frontmatter:{title:"Uport JS",category:"reference",index:4,type:"content"}}},{node:{fields:{slug:"/uport-js/guides/server-side-credentials-example"},headings:[{value:"Server-side Credentials",depth:1},{value:"Prerequisites:",depth:3},{value:"Register an App",depth:2},{value:"Setup a Requestor Service",depth:2},{value:"Setup a Creator Service",depth:2},{value:"For the fields of the credential:",depth:3},{value:"Setup a Verification service",depth:2}],excerpt:"Server-side Credentials Here we will demonstrate how to create and sign a custom credential on a server (called the Creator) and present…",timeToRead:9,frontmatter:{title:"Uport-JS Server-side How-to",category:"tutorials",index:1,type:"content"}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Modules",depth:2},{value:"Classes",depth:2},{value:"uport-connect/topicFactory",depth:2},{value:"uport-connect/topicFactory~TopicFactory(isOnMobile, pollingInterval, chasquiUrl) ⇒ ",depth:3},{value:"TopicFactory~waitForHashChange(topicName, cb)",depth:4},{value:"TopicFactory~pollForResult(topicName, url, cb, cancelled)",depth:4},{value:"TopicFactory~clearTopic(url)",depth:4},{value:"TopicFactory~newTopic(topicName) ⇒ ",depth:4},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"UportSubprovider",depth:2},{value:"new UportSubprovider(args)",depth:3},{value:"uportSubprovider.send()",depth:3},{value:"uportSubprovider.sendAsync(payload, callback)",depth:3}],excerpt:"Modules Classes uport-connect/topicFactory Manages the communication channel between the uport-connect library and a\n uPort mobile app. The…",timeToRead:25,frontmatter:{title:"Uport Connect",category:"reference",index:1,type:"content"}}}]}},pathContext:{slug:"/messages/shareresp"}}}});
//# sourceMappingURL=path---messages-shareresp-a347ee7c86bd872ba764.js.map